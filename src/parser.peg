code <- code_block EOI;

code_block <- statement wht? (";" / "\n" ws statement wht?)*;

statement <- return_statement / assign / function / if_statement / while_statement / for_statement / scope / call;
    return_statement <- "return " expression?;
    assign <- typed_identifier  "="  expression;
    function <- "fn "  identifier  "("  parameter_list?  ")"  ("->"  type_definition)?  "{"  code_block  "}";
    if_statement <- start_if_statement  else_if_statement* else_statement?;
        start_if_statement <- "if "  "("  expression  ")" scope;
        else_if_statement <- "else if "  "("  expression  ")" scope;
        else_statement <- "else " scope;
    while_statement <- "while "  "("  expression  ")" scope;
    for_statement <- "for "  identifier  " in "  expression scope;
    scope <- "{" ws code_block ws "}";

expression <- operation / range / section;
    operation <- section ws (operator ws section)+;
    range <- section wht ".." wht section;

section <- wht / index / call / unwrap / panic / spread / array / set / ordering / identifier / literal wht;
    spread <- "..."  expression;
    array <- "[" ws expression_list? ws "]";
    set <- "{" ws expression_list? ws "}";
    index <- section ("[" ws expression ws "]")+;
    unwrap <- section unwrap_symbol+;
        unwrap_symbol <- "?";
    panic <- section panic_symbol+;
        panic_symbol <- "!?";
    ordering <- ws "(" ws expression ws ")" ws;

call <- section  "(" ws expression_list? ws ")";

operator <- add / sub / mul / div / modu / eq / neq / lt / lte / gt / gte / and / or / pow;
    add <- "+";
    sub <- "-";
    mul <- "*";
    div <- "/";
    modu <- "%";
    eq <- "==";
    neq <- "!=";
    lt <- "<";
    lte <- "<=";
    gt <- ">";
    gte <- ">=";
    and <- "&&";
    or <- "/|";
    pow <- "^";


expression_list <- (expression ws "," ws)*  expression;
parameter_list <- (typed_identifier  wht "," wht)*  typed_identifier;

typed_identifier <- identifier wht (":" wht type_definition)?;

type_definition <- identifier;

identifier <- alpha (alpha / digit / "_")*;



literal <- wht (number / string / bool) wht;
    number <- int / float;
        int <- (digit / "_")+;
        float <- (digit / "_")+  "."  (digit / "_")+;
    string <- re#("[^"]*")|'[^']*'#;
    bool <- true_bool / false_bool;
        true_bool <- "true";
        false_bool <- "false";

alpha <- re#[a-zA-Z]#;
digit <- re#[0-9]#;

ws <- (COMMENT / WHITESPACE)*;
COMMENT <- wht re#//[^\r\n]*#;

wht <- re#[ \t]*#;